// Code generated by Prisma CLI (https://github.com/prisma/prisma) and prisma-client-lib@1.17.0-beta.16. DO NOT EDIT.

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  movement: (where?: MovementWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  log: (where?: LogWhereInput) => Promise<boolean>;
  set: (where?: SetWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  movement: (where: MovementWhereUniqueInput) => Movement;
  movements: (
    args?: {
      where?: MovementWhereInput;
      orderBy?: MovementOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<MovementNode>>;
  movementsConnection: (
    args?: {
      where?: MovementWhereInput;
      orderBy?: MovementOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MovementConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  log: (where: LogWhereUniqueInput) => Log;
  logs: (
    args?: {
      where?: LogWhereInput;
      orderBy?: LogOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<LogNode>>;
  logsConnection: (
    args?: {
      where?: LogWhereInput;
      orderBy?: LogOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LogConnection;
  set: (where: SetWhereUniqueInput) => Set;
  sets: (
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SetNode>>;
  setsConnection: (
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SetConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMovement: (data: MovementCreateInput) => Movement;
  updateMovement: (
    args: { data: MovementUpdateInput; where: MovementWhereUniqueInput }
  ) => Movement;
  updateManyMovements: (
    args: { data: MovementUpdateInput; where?: MovementWhereInput }
  ) => BatchPayload;
  upsertMovement: (
    args: {
      where: MovementWhereUniqueInput;
      create: MovementCreateInput;
      update: MovementUpdateInput;
    }
  ) => Movement;
  deleteMovement: (where: MovementWhereUniqueInput) => Movement;
  deleteManyMovements: (where?: MovementWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createLog: (data: LogCreateInput) => Log;
  updateLog: (
    args: { data: LogUpdateInput; where: LogWhereUniqueInput }
  ) => Log;
  updateManyLogs: (
    args: { data: LogUpdateInput; where?: LogWhereInput }
  ) => BatchPayload;
  upsertLog: (
    args: {
      where: LogWhereUniqueInput;
      create: LogCreateInput;
      update: LogUpdateInput;
    }
  ) => Log;
  deleteLog: (where: LogWhereUniqueInput) => Log;
  deleteManyLogs: (where?: LogWhereInput) => BatchPayload;
  createSet: (data: SetCreateInput) => Set;
  updateSet: (
    args: { data: SetUpdateInput; where: SetWhereUniqueInput }
  ) => Set;
  updateManySets: (
    args: { data: SetUpdateInput; where?: SetWhereInput }
  ) => BatchPayload;
  upsertSet: (
    args: {
      where: SetWhereUniqueInput;
      create: SetCreateInput;
      update: SetUpdateInput;
    }
  ) => Set;
  deleteSet: (where: SetWhereUniqueInput) => Set;
  deleteManySets: (where?: SetWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  movement: (
    where?: MovementSubscriptionWhereInput
  ) => MovementSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  log: (
    where?: LogSubscriptionWhereInput
  ) => LogSubscriptionPayloadSubscription;
  set: (
    where?: SetSubscriptionWhereInput
  ) => SetSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "created_at_ASC"
  | "created_at_DESC"
  | "reps_ASC"
  | "reps_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "created_at_ASC"
  | "created_at_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MovementOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SetCreateManyWithoutUserInput {
  create?: SetCreateWithoutUserInput[] | SetCreateWithoutUserInput;
  connect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
}

export type MovementWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
  name?: String;
}>;

export interface UserCreateOneWithoutSetsInput {
  create?: UserCreateWithoutSetsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutSetsInput {
  update: UserUpdateWithoutSetsDataInput;
  create: UserCreateWithoutSetsInput;
}

export interface UserCreateWithoutSetsInput {
  username: String;
  email: String;
  password: String;
  logs?: LogCreateManyWithoutUserInput;
}

export interface SetUpdateWithWhereUniqueWithoutMovementInput {
  where: SetWhereUniqueInput;
  data: SetUpdateWithoutMovementDataInput;
}

export interface LogCreateManyWithoutUserInput {
  create?: LogCreateWithoutUserInput[] | LogCreateWithoutUserInput;
  connect?: LogWhereUniqueInput[] | LogWhereUniqueInput;
}

export interface LogWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  created_at?: DateTimeInput;
  created_at_not?: DateTimeInput;
  created_at_in?: DateTimeInput[] | DateTimeInput;
  created_at_not_in?: DateTimeInput[] | DateTimeInput;
  created_at_lt?: DateTimeInput;
  created_at_lte?: DateTimeInput;
  created_at_gt?: DateTimeInput;
  created_at_gte?: DateTimeInput;
  sets_every?: SetWhereInput;
  sets_some?: SetWhereInput;
  sets_none?: SetWhereInput;
  user?: UserWhereInput;
  AND?: LogWhereInput[] | LogWhereInput;
  OR?: LogWhereInput[] | LogWhereInput;
  NOT?: LogWhereInput[] | LogWhereInput;
}

export interface LogCreateWithoutUserInput {
  created_at: DateTimeInput;
  sets?: SetCreateManyWithoutLogInput;
}

export interface SetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SetWhereInput;
  AND?: SetSubscriptionWhereInput[] | SetSubscriptionWhereInput;
  OR?: SetSubscriptionWhereInput[] | SetSubscriptionWhereInput;
  NOT?: SetSubscriptionWhereInput[] | SetSubscriptionWhereInput;
}

export interface SetCreateManyWithoutLogInput {
  create?: SetCreateWithoutLogInput[] | SetCreateWithoutLogInput;
  connect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface SetCreateWithoutLogInput {
  created_at: DateTimeInput;
  movement: MovementCreateOneWithoutSetsInput;
  reps: Int;
  weight: Float;
  unit: String;
  user: UserCreateOneWithoutSetsInput;
}

export interface SetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  created_at?: DateTimeInput;
  created_at_not?: DateTimeInput;
  created_at_in?: DateTimeInput[] | DateTimeInput;
  created_at_not_in?: DateTimeInput[] | DateTimeInput;
  created_at_lt?: DateTimeInput;
  created_at_lte?: DateTimeInput;
  created_at_gt?: DateTimeInput;
  created_at_gte?: DateTimeInput;
  movement?: MovementWhereInput;
  reps?: Int;
  reps_not?: Int;
  reps_in?: Int[] | Int;
  reps_not_in?: Int[] | Int;
  reps_lt?: Int;
  reps_lte?: Int;
  reps_gt?: Int;
  reps_gte?: Int;
  weight?: Float;
  weight_not?: Float;
  weight_in?: Float[] | Float;
  weight_not_in?: Float[] | Float;
  weight_lt?: Float;
  weight_lte?: Float;
  weight_gt?: Float;
  weight_gte?: Float;
  unit?: String;
  unit_not?: String;
  unit_in?: String[] | String;
  unit_not_in?: String[] | String;
  unit_lt?: String;
  unit_lte?: String;
  unit_gt?: String;
  unit_gte?: String;
  unit_contains?: String;
  unit_not_contains?: String;
  unit_starts_with?: String;
  unit_not_starts_with?: String;
  unit_ends_with?: String;
  unit_not_ends_with?: String;
  user?: UserWhereInput;
  log?: LogWhereInput;
  AND?: SetWhereInput[] | SetWhereInput;
  OR?: SetWhereInput[] | SetWhereInput;
  NOT?: SetWhereInput[] | SetWhereInput;
}

export interface MovementCreateOneWithoutSetsInput {
  create?: MovementCreateWithoutSetsInput;
  connect?: MovementWhereUniqueInput;
}

export interface SetCreateInput {
  created_at: DateTimeInput;
  movement: MovementCreateOneWithoutSetsInput;
  reps: Int;
  weight: Float;
  unit: String;
  user: UserCreateOneWithoutSetsInput;
  log: LogCreateOneWithoutSetsInput;
}

export interface MovementCreateWithoutSetsInput {
  name: String;
}

export interface LogCreateInput {
  created_at: DateTimeInput;
  sets?: SetCreateManyWithoutLogInput;
  user: UserCreateOneWithoutLogsInput;
}

export interface LogCreateOneWithoutSetsInput {
  create?: LogCreateWithoutSetsInput;
  connect?: LogWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
  username?: String;
  email?: String;
}>;

export interface LogCreateWithoutSetsInput {
  created_at: DateTimeInput;
  user: UserCreateOneWithoutLogsInput;
}

export interface SetUpsertWithWhereUniqueWithoutMovementInput {
  where: SetWhereUniqueInput;
  update: SetUpdateWithoutMovementDataInput;
  create: SetCreateWithoutMovementInput;
}

export interface UserCreateOneWithoutLogsInput {
  create?: UserCreateWithoutLogsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutLogsInput {
  update: UserUpdateWithoutLogsDataInput;
  create: UserCreateWithoutLogsInput;
}

export interface UserCreateWithoutLogsInput {
  username: String;
  email: String;
  password: String;
  sets?: SetCreateManyWithoutUserInput;
}

export interface SetUpsertWithWhereUniqueWithoutUserInput {
  where: SetWhereUniqueInput;
  update: SetUpdateWithoutUserDataInput;
  create: SetCreateWithoutUserInput;
}

export interface LogUpdateWithoutSetsDataInput {
  created_at?: DateTimeInput;
  user?: UserUpdateOneWithoutLogsInput;
}

export interface SetUpdateWithWhereUniqueWithoutUserInput {
  where: SetWhereUniqueInput;
  data: SetUpdateWithoutUserDataInput;
}

export interface SetCreateWithoutUserInput {
  created_at: DateTimeInput;
  movement: MovementCreateOneWithoutSetsInput;
  reps: Int;
  weight: Float;
  unit: String;
  log: LogCreateOneWithoutSetsInput;
}

export interface SetUpdateManyWithoutUserInput {
  create?: SetCreateWithoutUserInput[] | SetCreateWithoutUserInput;
  delete?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  connect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  disconnect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  update?:
    | SetUpdateWithWhereUniqueWithoutUserInput[]
    | SetUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | SetUpsertWithWhereUniqueWithoutUserInput[]
    | SetUpsertWithWhereUniqueWithoutUserInput;
}

export interface MovementUpdateInput {
  name?: String;
  sets?: SetUpdateManyWithoutMovementInput;
}

export interface UserUpdateOneWithoutLogsInput {
  create?: UserCreateWithoutLogsInput;
  update?: UserUpdateWithoutLogsDataInput;
  upsert?: UserUpsertWithoutLogsInput;
  delete?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface SetUpdateManyWithoutMovementInput {
  create?: SetCreateWithoutMovementInput[] | SetCreateWithoutMovementInput;
  delete?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  connect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  disconnect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  update?:
    | SetUpdateWithWhereUniqueWithoutMovementInput[]
    | SetUpdateWithWhereUniqueWithoutMovementInput;
  upsert?:
    | SetUpsertWithWhereUniqueWithoutMovementInput[]
    | SetUpsertWithWhereUniqueWithoutMovementInput;
}

export interface MovementCreateInput {
  name: String;
  sets?: SetCreateManyWithoutMovementInput;
}

export interface LogUpdateOneWithoutSetsInput {
  create?: LogCreateWithoutSetsInput;
  update?: LogUpdateWithoutSetsDataInput;
  upsert?: LogUpsertWithoutSetsInput;
  delete?: Boolean;
  connect?: LogWhereUniqueInput;
}

export interface SetCreateWithoutMovementInput {
  created_at: DateTimeInput;
  reps: Int;
  weight: Float;
  unit: String;
  user: UserCreateOneWithoutSetsInput;
  log: LogCreateOneWithoutSetsInput;
}

export interface SetUpdateWithoutMovementDataInput {
  created_at?: DateTimeInput;
  reps?: Int;
  weight?: Float;
  unit?: String;
  user?: UserUpdateOneWithoutSetsInput;
  log?: LogUpdateOneWithoutSetsInput;
}

export interface MovementWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  sets_every?: SetWhereInput;
  sets_some?: SetWhereInput;
  sets_none?: SetWhereInput;
  AND?: MovementWhereInput[] | MovementWhereInput;
  OR?: MovementWhereInput[] | MovementWhereInput;
  NOT?: MovementWhereInput[] | MovementWhereInput;
}

export interface UserUpdateOneWithoutSetsInput {
  create?: UserCreateWithoutSetsInput;
  update?: UserUpdateWithoutSetsDataInput;
  upsert?: UserUpsertWithoutSetsInput;
  delete?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface MovementSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MovementWhereInput;
  AND?: MovementSubscriptionWhereInput[] | MovementSubscriptionWhereInput;
  OR?: MovementSubscriptionWhereInput[] | MovementSubscriptionWhereInput;
  NOT?: MovementSubscriptionWhereInput[] | MovementSubscriptionWhereInput;
}

export interface UserUpdateWithoutSetsDataInput {
  username?: String;
  email?: String;
  password?: String;
  logs?: LogUpdateManyWithoutUserInput;
}

export interface LogUpdateInput {
  created_at?: DateTimeInput;
  sets?: SetUpdateManyWithoutLogInput;
  user?: UserUpdateOneWithoutLogsInput;
}

export interface LogUpdateManyWithoutUserInput {
  create?: LogCreateWithoutUserInput[] | LogCreateWithoutUserInput;
  delete?: LogWhereUniqueInput[] | LogWhereUniqueInput;
  connect?: LogWhereUniqueInput[] | LogWhereUniqueInput;
  disconnect?: LogWhereUniqueInput[] | LogWhereUniqueInput;
  update?:
    | LogUpdateWithWhereUniqueWithoutUserInput[]
    | LogUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | LogUpsertWithWhereUniqueWithoutUserInput[]
    | LogUpsertWithWhereUniqueWithoutUserInput;
}

export interface UserCreateInput {
  username: String;
  email: String;
  password: String;
  logs?: LogCreateManyWithoutUserInput;
  sets?: SetCreateManyWithoutUserInput;
}

export interface LogUpdateWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput;
  data: LogUpdateWithoutUserDataInput;
}

export type LogWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface LogUpdateWithoutUserDataInput {
  created_at?: DateTimeInput;
  sets?: SetUpdateManyWithoutLogInput;
}

export type SetWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface SetUpdateManyWithoutLogInput {
  create?: SetCreateWithoutLogInput[] | SetCreateWithoutLogInput;
  delete?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  connect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  disconnect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
  update?:
    | SetUpdateWithWhereUniqueWithoutLogInput[]
    | SetUpdateWithWhereUniqueWithoutLogInput;
  upsert?:
    | SetUpsertWithWhereUniqueWithoutLogInput[]
    | SetUpsertWithWhereUniqueWithoutLogInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  logs_every?: LogWhereInput;
  logs_some?: LogWhereInput;
  logs_none?: LogWhereInput;
  sets_every?: SetWhereInput;
  sets_some?: SetWhereInput;
  sets_none?: SetWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface SetUpdateWithWhereUniqueWithoutLogInput {
  where: SetWhereUniqueInput;
  data: SetUpdateWithoutLogDataInput;
}

export interface SetUpdateInput {
  created_at?: DateTimeInput;
  movement?: MovementUpdateOneWithoutSetsInput;
  reps?: Int;
  weight?: Float;
  unit?: String;
  user?: UserUpdateOneWithoutSetsInput;
  log?: LogUpdateOneWithoutSetsInput;
}

export interface SetUpdateWithoutLogDataInput {
  created_at?: DateTimeInput;
  movement?: MovementUpdateOneWithoutSetsInput;
  reps?: Int;
  weight?: Float;
  unit?: String;
  user?: UserUpdateOneWithoutSetsInput;
}

export interface LogUpsertWithoutSetsInput {
  update: LogUpdateWithoutSetsDataInput;
  create: LogCreateWithoutSetsInput;
}

export interface MovementUpdateOneWithoutSetsInput {
  create?: MovementCreateWithoutSetsInput;
  update?: MovementUpdateWithoutSetsDataInput;
  upsert?: MovementUpsertWithoutSetsInput;
  delete?: Boolean;
  connect?: MovementWhereUniqueInput;
}

export interface UserUpdateWithoutLogsDataInput {
  username?: String;
  email?: String;
  password?: String;
  sets?: SetUpdateManyWithoutUserInput;
}

export interface LogUpsertWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput;
  update: LogUpdateWithoutUserDataInput;
  create: LogCreateWithoutUserInput;
}

export interface SetUpsertWithWhereUniqueWithoutLogInput {
  where: SetWhereUniqueInput;
  update: SetUpdateWithoutLogDataInput;
  create: SetCreateWithoutLogInput;
}

export interface MovementUpsertWithoutSetsInput {
  update: MovementUpdateWithoutSetsDataInput;
  create: MovementCreateWithoutSetsInput;
}

export interface MovementUpdateWithoutSetsDataInput {
  name?: String;
}

export interface SetCreateManyWithoutMovementInput {
  create?: SetCreateWithoutMovementInput[] | SetCreateWithoutMovementInput;
  connect?: SetWhereUniqueInput[] | SetWhereUniqueInput;
}

export interface SetUpdateWithoutUserDataInput {
  created_at?: DateTimeInput;
  movement?: MovementUpdateOneWithoutSetsInput;
  reps?: Int;
  weight?: Float;
  unit?: String;
  log?: LogUpdateOneWithoutSetsInput;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  password?: String;
  logs?: LogUpdateManyWithoutUserInput;
  sets?: SetUpdateManyWithoutUserInput;
}

export interface LogSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LogWhereInput;
  AND?: LogSubscriptionWhereInput[] | LogSubscriptionWhereInput;
  OR?: LogSubscriptionWhereInput[] | LogSubscriptionWhereInput;
  NOT?: LogSubscriptionWhereInput[] | LogSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SetPreviousValuesNode {
  id: ID_Output;
  created_at: DateTimeOutput;
  reps: Int;
  weight: Float;
  unit: String;
}

export interface SetPreviousValues
  extends Promise<SetPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  reps: () => Promise<Int>;
  weight: () => Promise<Float>;
  unit: () => Promise<String>;
}

export interface SetPreviousValuesSubscription
  extends Promise<AsyncIterator<SetPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  reps: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Float>>;
  unit: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMovementNode {
  count: Int;
}

export interface AggregateMovement
  extends Promise<AggregateMovementNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovementSubscription
  extends Promise<AsyncIterator<AggregateMovementNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserNode {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  logs: <T = Promise<Array<LogNode>>>(
    args?: {
      where?: LogWhereInput;
      orderBy?: LogOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sets: <T = Promise<Array<SetNode>>>(
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  logs: <T = Promise<AsyncIterator<Array<LogSubscription>>>>(
    args?: {
      where?: LogWhereInput;
      orderBy?: LogOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sets: <T = Promise<AsyncIterator<Array<SetSubscription>>>>(
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MovementEdgeNode {
  cursor: String;
}

export interface MovementEdge extends Promise<MovementEdgeNode>, Fragmentable {
  node: <T = Movement>() => T;
  cursor: () => Promise<String>;
}

export interface MovementEdgeSubscription
  extends Promise<AsyncIterator<MovementEdgeNode>>,
    Fragmentable {
  node: <T = MovementSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SetEdgeNode {
  cursor: String;
}

export interface SetEdge extends Promise<SetEdgeNode>, Fragmentable {
  node: <T = Set>() => T;
  cursor: () => Promise<String>;
}

export interface SetEdgeSubscription
  extends Promise<AsyncIterator<SetEdgeNode>>,
    Fragmentable {
  node: <T = SetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SetNode {
  id: ID_Output;
  created_at: DateTimeOutput;
  reps: Int;
  weight: Float;
  unit: String;
}

export interface Set extends Promise<SetNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  movement: <T = Movement>() => T;
  reps: () => Promise<Int>;
  weight: () => Promise<Float>;
  unit: () => Promise<String>;
  user: <T = User>() => T;
  log: <T = Log>() => T;
}

export interface SetSubscription
  extends Promise<AsyncIterator<SetNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  movement: <T = MovementSubscription>() => T;
  reps: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Float>>;
  unit: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  log: <T = LogSubscription>() => T;
}

export interface AggregateLogNode {
  count: Int;
}

export interface AggregateLog extends Promise<AggregateLogNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLogSubscription
  extends Promise<AsyncIterator<AggregateLogNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LogConnectionNode {}

export interface LogConnection
  extends Promise<LogConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<LogEdgeNode>>>() => T;
  aggregate: <T = AggregateLog>() => T;
}

export interface LogConnectionSubscription
  extends Promise<AsyncIterator<LogConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<LogEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateLogSubscription>() => T;
}

export interface MovementConnectionNode {}

export interface MovementConnection
  extends Promise<MovementConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<MovementEdgeNode>>>() => T;
  aggregate: <T = AggregateMovement>() => T;
}

export interface MovementConnectionSubscription
  extends Promise<AsyncIterator<MovementConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<MovementEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateMovementSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LogNode {
  id: ID_Output;
  created_at: DateTimeOutput;
}

export interface Log extends Promise<LogNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  sets: <T = Promise<Array<SetNode>>>(
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = User>() => T;
}

export interface LogSubscription
  extends Promise<AsyncIterator<LogNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  sets: <T = Promise<AsyncIterator<Array<SetSubscription>>>>(
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = UserSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LogPreviousValuesNode {
  id: ID_Output;
  created_at: DateTimeOutput;
}

export interface LogPreviousValues
  extends Promise<LogPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
}

export interface LogPreviousValuesSubscription
  extends Promise<AsyncIterator<LogPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MovementNode {
  id: ID_Output;
  name: String;
}

export interface Movement extends Promise<MovementNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  sets: <T = Promise<Array<SetNode>>>(
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MovementSubscription
  extends Promise<AsyncIterator<MovementNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  sets: <T = Promise<AsyncIterator<Array<SetSubscription>>>>(
    args?: {
      where?: SetWhereInput;
      orderBy?: SetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MovementSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MovementSubscriptionPayload
  extends Promise<MovementSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Movement>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MovementPreviousValues>() => T;
}

export interface MovementSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovementSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovementSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MovementPreviousValuesSubscription>() => T;
}

export interface SetConnectionNode {}

export interface SetConnection
  extends Promise<SetConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SetEdgeNode>>>() => T;
  aggregate: <T = AggregateSet>() => T;
}

export interface SetConnectionSubscription
  extends Promise<AsyncIterator<SetConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SetEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSetSubscription>() => T;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LogSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LogSubscriptionPayload
  extends Promise<LogSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Log>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LogPreviousValues>() => T;
}

export interface LogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LogSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LogPreviousValuesSubscription>() => T;
}

export interface MovementPreviousValuesNode {
  id: ID_Output;
  name: String;
}

export interface MovementPreviousValues
  extends Promise<MovementPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface MovementPreviousValuesSubscription
  extends Promise<AsyncIterator<MovementPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface LogEdgeNode {
  cursor: String;
}

export interface LogEdge extends Promise<LogEdgeNode>, Fragmentable {
  node: <T = Log>() => T;
  cursor: () => Promise<String>;
}

export interface LogEdgeSubscription
  extends Promise<AsyncIterator<LogEdgeNode>>,
    Fragmentable {
  node: <T = LogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSetNode {
  count: Int;
}

export interface AggregateSet extends Promise<AggregateSetNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSetSubscription
  extends Promise<AsyncIterator<AggregateSetNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SetSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SetSubscriptionPayload
  extends Promise<SetSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Set>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SetPreviousValues>() => T;
}

export interface SetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SetSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SetPreviousValuesSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: "https://logr-prisma.herokuapp.com/logr-prisma/dev",
  secret: "blue-ivy-radish"
});
export const prisma = new Prisma();
